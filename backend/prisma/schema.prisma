generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Global settings for the entire application (singleton)
model GlobalSettings {
  id              String    @id @default(cuid())
  singleton       Boolean   @unique @default(true)
  wahaHost        String?   @map("waha_host")
  wahaApiKey      String?   @map("waha_api_key")
  evolutionHost   String?   @map("evolution_host")
  evolutionApiKey String?   @map("evolution_api_key")
  companyName     String?   @map("company_name")
  logoUrl         String?   @map("logo_url")
  faviconUrl      String?   @map("favicon_url")
  pageTitle       String?   @map("page_title")
  iconUrl         String?   @map("icon_url")
  primaryColor    String?   @map("primary_color")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("global_settings")
}

// Tenant (empresa)
model Tenant {
  id               String             @id @default(cuid())
  slug             String             @unique
  name             String
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  users            User[]
  contacts         Contact[]
  campaigns        Campaign[]
  whatsappSessions WhatsAppSession[]
  categories       Category[]
  quotas           TenantQuota?
  settings         TenantSettings?
  alerts           Alert[]
  userTenants      UserTenant[]
  messageTemplates MessageTemplate[]
  automationFlows  AutomationFlow[]
  credentialsZeus  CredentialsZeus?

  @@map("tenants")
}

model TenantQuota {
  id             String   @id @default(cuid())
  tenantId       String   @unique @map("tenant_id")
  maxUsers       Int      @default(10) @map("max_users")
  maxContacts    Int      @default(1000) @map("max_contacts")
  maxCampaigns   Int      @default(50) @map("max_campaigns")
  maxConnections Int      @default(5) @map("max_connections")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_quotas")
}

model TenantSettings {
  id             String   @id @default(cuid())
  tenantId       String   @unique @map("tenant_id")
  openaiApiKey   String?  @map("openai_api_key")
  groqApiKey     String?  @map("groq_api_key")
  customBranding Json?    @map("custom_branding")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_settings")
}

model User {
  id                      String                @id @default(cuid())
  nome                    String
  email                   String                @unique
  senha                   String
  role                    String                @default("USER") // SUPERADMIN, ADMIN, USER
  ativo                   Boolean               @default(true)
  tenantId                String?               @map("tenant_id")
  ultimoLogin             DateTime?             @map("ultimo_login")
  criadoEm                DateTime              @default(now()) @map("criado_em")
  atualizadoEm            DateTime              @updatedAt @map("atualizado_em")
  tenant                  Tenant?               @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  tenants                 UserTenant[]
  alerts                  Alert[]
  notifications           Notification[]
  createdMessageTemplates MessageTemplate[]     @relation("CreatedBy")
  createdAutomationFlows  AutomationFlow[]      @relation("CreatedBy")

  @@map("users")
}

model UserTenant {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tenantId  String   @map("tenant_id")
  role      String   @default("USER")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@map("user_tenants")
}

model Contact {
  id           String            @id @default(cuid())
  nome         String
  telefone     String
  email        String?
  observacoes  String?
  tags         String[]
  tenantId     String?           @map("tenant_id")
  categoriaId  String?           @map("categoria_id")
  criadoEm     DateTime          @default(now()) @map("criado_em")
  atualizadoEm DateTime          @updatedAt @map("atualizado_em")
  tenant       Tenant?           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  categoria    Category?         @relation(fields: [categoriaId], references: [id], onDelete: SetNull)
  messages     CampaignMessage[]

  @@map("contacts")
}

model Category {
  id           String    @id @default(cuid())
  nome         String
  cor          String
  descricao    String?
  tenantId     String?   @map("tenant_id")
  criadoEm     DateTime  @default(now()) @map("criado_em")
  atualizadoEm DateTime  @updatedAt @map("atualizado_em")
  tenant       Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contacts     Contact[]

  @@map("categories")
}

model Campaign {
  id               String            @id @default(cuid())
  nome             String
  targetTags       String            @map("target_tags")
  sessionName      String?           @map("session_name")
  sessionNames     String?           @map("session_names")
  messageType      String            @map("message_type")
  messageContent   String            @map("message_content")
  randomDelay      Int               @default(0) @map("random_delay")
  startImmediately Boolean           @default(true) @map("start_immediately")
  scheduledFor     DateTime?         @map("scheduled_for")
  status           String            @default("PENDING") // PENDING, RUNNING, COMPLETED, PAUSED, FAILED
  totalContacts    Int               @default(0) @map("total_contacts")
  sentCount        Int               @default(0) @map("sent_count")
  failedCount      Int               @default(0) @map("failed_count")
  startedAt        DateTime?         @map("started_at")
  completedAt      DateTime?         @map("completed_at")
  createdBy        String?           @map("created_by")
  createdByName    String?           @map("created_by_name")
  tenantId         String?           @map("tenant_id")
  criadoEm         DateTime          @default(now()) @map("criado_em")
  atualizadoEm     DateTime          @updatedAt @map("atualizado_em")
  tenant           Tenant?           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  session          WhatsAppSession?  @relation(fields: [sessionName], references: [name], onDelete: SetNull)
  messages         CampaignMessage[]

  @@map("campaigns")
}

model CampaignMessage {
  id                String    @id @default(cuid())
  campaignId        String    @map("campaign_id")
  contactId         String?   @map("contact_id")
  contactPhone      String    @map("contact_phone")
  contactName       String    @map("contact_name")
  status            String    @default("PENDING") // PENDING, PROCESSING, SENT, FAILED
  sentAt            DateTime? @map("sent_at")
  deliveredAt       DateTime? @map("delivered_at")
  readAt            DateTime? @map("read_at")
  errorMessage      String?   @map("error_message")
  messageId         String?   @map("message_id")
  sessionName       String?   @map("session_name")
  selectedVariation String?   @map("selected_variation")
  tenantId          String?   @map("tenant_id")
  criadoEm          DateTime  @default(now()) @map("criado_em")
  campaign          Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact           Contact?  @relation(fields: [contactId], references: [id], onDelete: SetNull)

  @@map("campaign_messages")
}

model WhatsAppSession {
  id             String     @id @default(cuid())
  name           String     @unique
  displayName    String?    @map("display_name")
  status         String
  provider       String     @default("WAHA") // WAHA, EVOLUTION
  config         String?
  meId           String?    @map("me_id")
  mePushName     String?    @map("me_push_name")
  meLid          String?    @map("me_lid")
  meJid          String?    @map("me_jid")
  qr             String?
  qrExpiresAt    DateTime?  @map("qr_expires_at")
  assignedWorker String?    @map("assigned_worker")
  tenantId       String?    @map("tenant_id")
  criadoEm       DateTime   @default(now()) @map("criado_em")
  atualizadoEm   DateTime   @updatedAt @map("atualizado_em")
  tenant         Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaigns      Campaign[]

  @@map("whatsapp_sessions")
}

enum AlertType {
  SYSTEM_ERROR
  QUOTA_WARNING
  QUOTA_EXCEEDED
  SESSION_FAILED
  CAMPAIGN_FAILED
  DATABASE_ERROR
  INTEGRATION_ERROR
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Alert {
  id            String         @id @default(cuid())
  type          AlertType
  severity      AlertSeverity
  title         String
  message       String
  metadata      Json?
  resolved      Boolean        @default(false)
  resolvedAt    DateTime?      @map("resolved_at")
  resolvedBy    String?        @map("resolved_by")
  tenantId      String?        @map("tenant_id")
  userId        String?        @map("user_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  tenant        Tenant?        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  notifications Notification[]

  @@map("alerts")
}

enum NotificationMethod {
  IN_APP
  EMAIL
  WEBHOOK
}

model Notification {
  id        String             @id @default(cuid())
  alertId   String             @map("alert_id")
  userId    String             @map("user_id")
  method    NotificationMethod
  read      Boolean            @default(false)
  readAt    DateTime?          @map("read_at")
  createdAt DateTime           @default(now()) @map("created_at")
  alert     Alert              @relation(fields: [alertId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model MessageTemplate {
  id          String   @id @default(cuid())
  name        String
  tenantId    String   @map("tenant_id")
  category    String
  messageType String   @map("message_type") // TEXT, IMAGE, DOCUMENT, VIDEO, AUDIO
  content     String
  variables   String[]
  mediaUrl    String?  @map("media_url")
  active      Boolean  @default(true)
  tags        String[]
  description String?
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User     @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("message_templates")
}

model AutomationFlow {
  id          String                @id @default(cuid())
  name        String
  description String?
  tenantId    String                @map("tenant_id")
  active      Boolean               @default(true)
  trigger     Json
  conditions  Json?
  actions     Json
  createdBy   String                @map("created_by")
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")
  tenant      Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User                  @relation("CreatedBy", fields: [createdBy], references: [id])
  executions  AutomationExecution[]

  @@map("automation_flows")
}

model AutomationExecution {
  id         String   @id @default(cuid())
  flowId     String   @map("flow_id")
  status     String // SUCCESS, FAILED, RUNNING
  executedAt DateTime @default(now()) @map("executed_at")
  context    Json?
  error      String?
  flow       AutomationFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map("automation_executions")
}

model CredentialsZeus {
  id           String   @id @default(cuid())
  tenantId     String   @unique @map("tenant_id")
  host         String
  port         Int
  databaseName String   @map("database_name")
  username     String
  password     String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("credentials_zeus")
}